"
" A fairly good vimrc
" By Mahyar Abbaspour
"

" UI {{{
"

" Pathogen
execute pathogen#infect()

" Report number of terminal colors
if has("termguicolors")
    set termguicolors
else
    set t_Co=256
endif

" Enable syntax highlighting
syntax enable

" Color scheme
" let g:rehash256 = 1
" let g:molokai_original = 1
" colorscheme molokai
colorscheme badwolf

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=1

" Display the cursor position on the last line of the screen or in the status
" line of a window.
set ruler

" Show partial commands in the last line of the screen.
set showcmd

" Set the command window height to 2 lines, to avoid many cases of having to
" press <Enter> to continue
set cmdheight=1

" Display line numbers on the left
set number

" Display fold indicator on the left
set foldcolumn=1

" Always display the status line, even if only one window is displayed
set laststatus=2

" Enable use of the mouse for all modes
" set mouse=a

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=

" When on, splitting a window will put the new window right of the
" current one.
set splitright

" Status line
set statusline=%f%3(%m%)%r%h%w[%{&ff}]%{fugitive#statusline()}%=[%4lL,%2vC\ %P]

" }}}

" UX {{{
"

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Do not show extra information about the currently selected
" completion in the preview window.
set completeopt=longest,menu

" Vim with default settings does not allow easy switching between multiple
" files in the same editor window. The 'hidden' option, which allows you to
" re-use the same window and switch from an unsaved buffer without saving it
" first. It also allows you to keep an undo history for multiple files when
" re-using the same window in this way. Note that using persistent undo also
" lets you undo in multiple files even in the same window, but is less
" efficient and is actually designed for keeping undo history after closing
" Vim entirely. Vim will complain if you try to quit without saving, and
" swap files will keep you safe if your computer crashes.
set hidden

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Enhanced command-line completion.
set wildmode=longest:list
set wildmenu

" Enables the reading of .vimrc, .exrc and .gvimrc in the current directory.
" If you switch this option on you should also consider setting the 'secure'
" option.
set exrc

" When on, :autocmd, shell and write commands are not allowed in .vimrc
" and .exrc in the current directory and map commands are displayed.
set secure

" When a file has been detected to have been changed outside of Vim and
" it has not been changed inside of Vim, automatically read it again.
set autoread

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
set nomodeline

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When on, a <Tab> in front of a line inserts blanks according to shiftwidth.
" tabstop or softtabstop is used in other places.
set smarttab

" This option specifies how keyword completion works when CTRL-P or CTRL-N are
" used.
set complete=.,w,b,u,t,i,d,

" Virtual editing means that the cursor can be positioned where there is no
" actual character.
set virtualedit+=block

" A list of file patterns. A file that matches with one of these patterns is
" ignored when expanding wildcards, completing file or directory names, and
" influences the result of expand(), glob() and globpath() unless a flag is
" passed to disable this.
set wildignore+=__pycache__,*.pyc

" Sets the delay for the CursorHold event to fire.
set updatetime=1000

" }}}

" Searching {{{
"

" Highlight searches
set hlsearch

" While typing a search command, show where the pattern, as it was typed
" so far, matches.
set incsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" When on, the :substitute flag 'g' is default on.  This means that
" all matches in a line are substituted instead of one.
set gdefault

" Use ag over grep
if executable('ag')
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" }}}

" Formating {{{
"

" Indentation settings for using 4 spaces instead of tabs.
set tabstop=4
set shiftwidth=4
set expandtab

" Indentation settings for using hard tabs. Display tabs as four characters
" wide.
" set tabstop=4
" set shiftwidth=4
" set noexpandtab

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Delete comment character when joining commented lines
set formatoptions+=j

" Switch case style for C
set cinoptions=:0,g0

" Python
" Indent after an open paren
let g:pyindent_open_paren='&sw'
" Indent for a continuation line
let g:pyindent_continue='&sw'

" Go
let g:go_highlight_trailing_whitespace_error = 0

" }}}

" Mappings {{{
"

" Map <leader> to space
nnoremap <Space> <nop>
let mapleader=' '

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Don't use Ex mode, use Q for formatting.
map Q gq

" Spell check
nnoremap <leader>sp :set spell!<CR>

" Map CTRL-L to disable search highlighting
nnoremap <silent><C-L> :nohlsearch<CR>

" Map CTRL-SPACE for autocompletion
imap <C-@> <C-N>

" It will make <C-N> work the way it normally does; however, when the menu
" appears, the <Down> key will be simulated. What this accomplishes is it
" keeps a menu item always highlighted. This way you can keep typing
" characters to narrow the matches, and the nearest match will be selected so
" that you can hit Enter at any time to insert it.
inoremap <silent><expr> <C-@> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <silent><expr> <C-N> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <silent><expr> <C-X><C-N> pumvisible() ? '<C-x><C-n>' :
            \ '<C-x><C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <silent><expr> <C-X><C-O> pumvisible() ? '<C-x><C-o>' :
            \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Man page plugin map
nmap <leader>m <leader>K

" Buffer switch
inoremap <C-left> <esc>:bprev<CR>
inoremap <C-right> <esc>:bnext<CR>
nnoremap <C-right> :bnext<CR>
nnoremap <C-left> :bprev<CR>

" Window switch
nnoremap <S-up> <C-W><up>
nnoremap <S-down> <C-W><down>
nnoremap <S-left> <C-W><left>
nnoremap <S-right> <C-W><right>

" Short cut to edit vimrc
nnoremap <leader>ev :edit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Use these abbreviations to prevent annoying typos in vim console.
cnoreabbrev W w
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev Q q
cnoreabbrev Qa qa

" Better command line history
cnoremap <C-n> <down>
cnoremap <C-p> <up>

" }}}

" Functions {{{
"

function! GnuCStyle()
    setlocal cindent
    setlocal cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1
    setlocal shiftwidth=2
    setlocal softtabstop=2
    setlocal textwidth=79
    setlocal fo-=ro fo+=cql
endfunction

" Save current view settings on a per-window, per-buffer basis.
function! AutoSaveWinView()
    if !exists("w:SavedBufView")
        let w:SavedBufView = {}
    endif
    let w:SavedBufView[bufnr("%")] = winsaveview()
endfunction

" Restore current view settings.
function! AutoRestoreWinView()
    let buf = bufnr("%")
    if exists("w:SavedBufView") && has_key(w:SavedBufView, buf)
        let v = winsaveview()
        let atStartOfFile = v.lnum == 1 && v.col == 0
        if atStartOfFile && !&diff
            call winrestview(w:SavedBufView[buf])
        endif
        unlet w:SavedBufView[buf]
    endif
endfunction

function! LoadCscope()
    let db = findfile("cscope.out", ".;../../..")
    if (!empty(db))
        let path = strpart(db, 0, match(db, "/cscope.out$"))
        set nocscopeverbose " suppress 'duplicate connection' error
        exe "cs add " . db . " " . path
        set cscopeverbose
    endif
endfunction

" A helper function to eat extra chars used in iabbrev
function! Eatchar(pat)
    let c = nr2char(getchar(0))
    return (c =~ a:pat) ? '' : c
endfunction

" }}}

" Commands {{{
"

command! -nargs=1 Saveas :w! >> <args> | :e <args>

command! -nargs=* RunSilent execute ':silent !'.'<args>' | execute ':redraw!'

command! Bd bp | bd #
command! BD bp | bd #
command! Bw bp | bw #
command! BW bp | bw #

" }}}

" Autocommands {{{
"

augroup indentation
    autocmd!
    autocmd Filetype lua   setlocal tabstop=2 shiftwidth=2
    autocmd Filetype ruby  setlocal tabstop=2 shiftwidth=2
    autocmd Filetype html* setlocal tabstop=2 shiftwidth=2
    autocmd Filetype yaml  setlocal tabstop=2 shiftwidth=2

    autocmd Filetype c     setlocal tabstop=4 shiftwidth=4 noexpandtab
    autocmd Filetype cpp   setlocal tabstop=4 shiftwidth=4 noexpandtab
    autocmd Filetype go    setlocal tabstop=4 shiftwidth=4 noexpandtab
augroup END

augroup spelling
    autocmd!
    autocmd Filetype text      setlocal spell   textwidth=79
    autocmd Filetype markdown  setlocal spell   textwidth=79
    autocmd FileType gitcommit setlocal spell
    autocmd FileType help      setlocal nospell
augroup END

augroup snippet
    autocmd!
    autocmd Filetype python iabbrev pdb     import pdb; pdb.set_trace()<C-R>=Eatchar('\s')<CR>
    autocmd Filetype python iabbrev fpprint from pprint import pprint<C-R>=Eatchar('\s')<CR>
augroup END

augroup filetypes
    autocmd!
    autocmd BufNewFile,BufReadPost *.md        setlocal filetype=markdown
    autocmd BufNewFile,BufReadPost *.h         setlocal filetype=c
    autocmd BufNewFile,BufReadPost Vagrantfile setlocal filetype=ruby
    autocmd BufNewFile,BufReadPost *.sls       setlocal filetype=yaml
augroup END

augroup hooks
    autocmd!
    " When switching buffers, preserve window view.
    autocmd BufLeave * call AutoSaveWinView()
    autocmd BufEnter * call AutoRestoreWinView()

    autocmd InsertLeave * if &diff == 1 | diffupdate | endif

    autocmd BufEnter *.c call LoadCscope()
augroup END

augroup folding
    autocmd!
    autocmd BufNewFile,BufReadPost vimrc    setlocal foldmethod=marker foldlevel=0
    autocmd BufNewFile,BufReadPost init.vim setlocal foldmethod=marker foldlevel=0
augroup END

" }}}

" Plugins {{{

" Omnifunc
setlocal omnifunc=syntaxcomplete#Complete

" Delimate
let delimitMate_expand_cr = 1
autocmd FileType python let b:delimitMate_nesting_quotes = ['"']
autocmd FileType elixir let b:delimitMate_nesting_quotes = ['"']
autocmd FileType scheme let b:delimitMate_quotes = "\""

" Ctrlp
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_map = '<leader>f'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_open_multiple_files = 'i'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:100'
nnoremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_user_command = {
\ 'types': {
  \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
  \ },
\ 'fallback': 'find %s -type f',
\ }
let g:ctrlp_use_caching = 0
if executable('ag')
  let g:ctrlp_user_command['fallback'] = 'ag %s -l --nocolor -g ""'
endif

" Cscope
if has('cscope')
    set cscopetag cscopeverbose cscoperelative
    if has('quickfix')
        set cscopequickfix=s-,c-,d-,i-,t-,e-
    endif
endif

runtime! ftplugin/man.vim
runtime! macros/matchit.vim

nnoremap / mm/
nnoremap ? mm?

let g:ale_enabled = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'never'
" let g:ale_linters = {'go': ['gofmt', 'go vet', 'go build']}

" }}}

"| ale                      https://github.com/w0rp/ale.git
"| badwolf                  https://github.com/mahyarap/badwolf.git
"| ctrlp.vim                https://github.com/ctrlpvim/ctrlp.vim.git
"| delimitMate              https://github.com/Raimondi/delimitMate.git
"| groovyindent-unix        https://github.com/vim-scripts/groovyindent-unix.git
"| rust.vim                 https://github.com/rust-lang/rust.vim.git
"| tabular                  https://github.com/godlygeek/tabular.git
"| vala.vim                 https://github.com/arrufat/vala.vim.git
"| vim-commentary           https://github.com/tpope/vim-commentary.git
"| vim-elixir               https://github.com/elixir-lang/vim-elixir.git
"| vim-endwise              https://github.com/tpope/vim-endwise.git
"| vim-fugitive             https://github.com/tpope/vim-fugitive.git
"| vim-gas                  https://github.com/Shirk/vim-gas.git
"| vim-gitgutter            https://github.com/airblade/vim-gitgutter.git
"| vim-grepper              https://github.com/mhinz/vim-grepper.git
"| vim-javascript           https://github.com/pangloss/vim-javascript.git
"| vim-jsx                  https://github.com/mxw/vim-jsx.git
"| vim-pathogen             https://github.com/tpope/vim-pathogen
"| vimplug                  https://github.com/mahyarap/vimplug
"| vim-python-pep8-indent   https://github.com/Vimjas/vim-python-pep8-indent.git
"| vim-surround             https://github.com/tpope/vim-surround.git
"| vim-textobj-user         https://github.com/kana/vim-textobj-user.git
"| vim-toml                 https://github.com/cespare/vim-toml.git
"| vim-vue                  https://github.com/posva/vim-vue.git
